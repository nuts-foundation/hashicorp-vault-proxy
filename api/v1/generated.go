// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package v1

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/labstack/echo/v4"
)

// ErrorResponse The ErrorResponse contains the Problem Details for HTTP APIs as specified in [RFC7807](https://tools.ietf.org/html/rfc7807).
//
// It provides more detais about probles occured in the storage server.
//
// Return values contain the following members:
// - **title** (string) - A short, human-readable summary of the problem type.
// - **status** (number) - The HTTP status code generated by the origin server for this occurrence of the problem.
// - **backend** (string) The name of the storage backend. This can provide context to the error.
// - **detail** (string) - A human-readable explanation specific to this occurrence of the problem.
type ErrorResponse struct {
	// Backend The name of the storage backend. This can provide context to the error.
	Backend string `json:"backend"`

	// Detail A human-readable explanation specific to this occurrence of the problem.
	Detail string `json:"detail"`

	// Status HTTP statuscode
	Status int `json:"status"`

	// Title A short, human-readable summary of the problem type.
	Title string `json:"title"`
}

// Secret The secret value stored under the provided path. The secret should be a asci string or be base64 encoded.
type Secret = string

// SecretResponse Response object containing the secret value.
type SecretResponse struct {
	// Data The secret value stored under the provided path. The secret should be a asci string or be base64 encoded.
	Data Secret `json:"data"`
}

// StoreSecretRequest Request body to store a secret value.
type StoreSecretRequest struct {
	// Data The secret value stored under the provided path. The secret should be a asci string or be base64 encoded.
	Data Secret `json:"data"`
}

// StoreSecretJSONRequestBody defines body for StoreSecret for application/json ContentType.
type StoreSecretJSONRequestBody = StoreSecretRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Delete a value from the key store
	// (DELETE /secrets/{path})
	DeleteSecret(ctx echo.Context, path string) error
	// Lookup the secret for the provided path
	// (GET /secrets/{path})
	LookupSecret(ctx echo.Context, path string) error
	// Store a new value in the key store
	// (POST /secrets/{path})
	StoreSecret(ctx echo.Context, path string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// DeleteSecret converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteSecret(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "path" -------------
	var path string

	err = runtime.BindStyledParameterWithLocation("simple", false, "path", runtime.ParamLocationPath, ctx.Param("path"), &path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteSecret(ctx, path)
	return err
}

// LookupSecret converts echo context to params.
func (w *ServerInterfaceWrapper) LookupSecret(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "path" -------------
	var path string

	err = runtime.BindStyledParameterWithLocation("simple", false, "path", runtime.ParamLocationPath, ctx.Param("path"), &path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupSecret(ctx, path)
	return err
}

// StoreSecret converts echo context to params.
func (w *ServerInterfaceWrapper) StoreSecret(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "path" -------------
	var path string

	err = runtime.BindStyledParameterWithLocation("simple", false, "path", runtime.ParamLocationPath, ctx.Param("path"), &path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StoreSecret(ctx, path)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/secrets/:path", wrapper.DeleteSecret)
	router.GET(baseURL+"/secrets/:path", wrapper.LookupSecret)
	router.POST(baseURL+"/secrets/:path", wrapper.StoreSecret)

}

type DeleteSecretRequestObject struct {
	Path string `json:"path"`
}

type DeleteSecretResponseObject interface {
	VisitDeleteSecretResponse(w http.ResponseWriter) error
}

type DeleteSecret204Response struct {
}

func (response DeleteSecret204Response) VisitDeleteSecretResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteSecret400JSONResponse ErrorResponse

func (response DeleteSecret400JSONResponse) VisitDeleteSecretResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteSecret404Response struct {
}

func (response DeleteSecret404Response) VisitDeleteSecretResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type LookupSecretRequestObject struct {
	Path string `json:"path"`
}

type LookupSecretResponseObject interface {
	VisitLookupSecretResponse(w http.ResponseWriter) error
}

type LookupSecret200JSONResponse SecretResponse

func (response LookupSecret200JSONResponse) VisitLookupSecretResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type LookupSecret400JSONResponse ErrorResponse

func (response LookupSecret400JSONResponse) VisitLookupSecretResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type LookupSecret404Response struct {
}

func (response LookupSecret404Response) VisitLookupSecretResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type StoreSecretRequestObject struct {
	Path string `json:"path"`
	Body *StoreSecretJSONRequestBody
}

type StoreSecretResponseObject interface {
	VisitStoreSecretResponse(w http.ResponseWriter) error
}

type StoreSecret200JSONResponse SecretResponse

func (response StoreSecret200JSONResponse) VisitStoreSecretResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type StoreSecret400JSONResponse ErrorResponse

func (response StoreSecret400JSONResponse) VisitStoreSecretResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type StoreSecret409Response struct {
}

func (response StoreSecret409Response) VisitStoreSecretResponse(w http.ResponseWriter) error {
	w.WriteHeader(409)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Delete a value from the key store
	// (DELETE /secrets/{path})
	DeleteSecret(ctx context.Context, request DeleteSecretRequestObject) (DeleteSecretResponseObject, error)
	// Lookup the secret for the provided path
	// (GET /secrets/{path})
	LookupSecret(ctx context.Context, request LookupSecretRequestObject) (LookupSecretResponseObject, error)
	// Store a new value in the key store
	// (POST /secrets/{path})
	StoreSecret(ctx context.Context, request StoreSecretRequestObject) (StoreSecretResponseObject, error)
}

type StrictHandlerFunc func(ctx echo.Context, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// DeleteSecret operation middleware
func (sh *strictHandler) DeleteSecret(ctx echo.Context, path string) error {
	var request DeleteSecretRequestObject

	request.Path = path

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteSecret(ctx.Request().Context(), request.(DeleteSecretRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteSecret")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteSecretResponseObject); ok {
		return validResponse.VisitDeleteSecretResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// LookupSecret operation middleware
func (sh *strictHandler) LookupSecret(ctx echo.Context, path string) error {
	var request LookupSecretRequestObject

	request.Path = path

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.LookupSecret(ctx.Request().Context(), request.(LookupSecretRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "LookupSecret")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(LookupSecretResponseObject); ok {
		return validResponse.VisitLookupSecretResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// StoreSecret operation middleware
func (sh *strictHandler) StoreSecret(ctx echo.Context, path string) error {
	var request StoreSecretRequestObject

	request.Path = path

	var body StoreSecretJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.StoreSecret(ctx.Request().Context(), request.(StoreSecretRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "StoreSecret")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(StoreSecretResponseObject); ok {
		return validResponse.VisitStoreSecretResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}
